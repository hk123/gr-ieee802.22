

#include "linear_comb.h"

using namespace gr::ieee802_22::equalizer;

void linear_comb::equalize(const gr_complex *in, gr_complex *out, int n) {
	if(n < 1)
		return;

	int diff = n % 7;
	int pilot_subcarrier_offset ;
	int dc_offset = 0;
	if (diff == 1) {
		pilot_subcarrier_offset = 0;}
	else if (diff == 2){
		pilot_subcarrier_offset = 3;}
	else if (diff == 3){
		pilot_subcarrier_offset = 5;}
	else if (diff == 4){
		pilot_subcarrier_offset = 1;}
	else if (diff == 5){
		pilot_subcarrier_offset = 4;}
	else if (diff == 6){
		pilot_subcarrier_offset = 6;}
	     else {
		pilot_subcarrier_offset = 2;}

	int pilot = 184 + pilot_subcarrier_offset;

	double avg_mag = 0.0;
        double my = 0.0;
	double mx = 0.0;
	double p1 = 0.0;
	double var = 0.0;
	double cov = 0.0;
	int k ;
	gr_complex a = gr_complex(1, 0);

	for (int j = 0; j < 240 ; j++) {
	if (j >= 120) {
		dc_offset = 1;
			}
	  k = pilot + dc_offset + (7*j);
        
         p1 = p1 + arg( (POLARITY[((diff-1) * 240) + j]) * in[k] * a );
	 my = my + ( p1 / 240 );
	  a = conj((POLARITY[((diff-1) * 240) + j]) * in[k] );
	 mx = mx + ( k / 240 );
	var = var + (( k * k ) / 240 );
	cov = cov + ( ( k * p1 ) / 240 );
	avg_mag = avg_mag + ((abs(in[k])) / 240 );
					} 

	//double p1 = arg( p * in[11]);
	//double p2 = arg( p * in[25] * conj(p * in[11])) + p1;
	//double p3 = arg( p * in[39] * conj(p * in[25])) + p2;
	//double p4 = arg(-p * in[53] * conj(p * in[39])) + p3;

	var = ( var ) - (mx * mx);
        cov =  (cov ) - (mx * my);
	double beta = cov / var;
	double alpha = my - beta * mx;

	int c = 0;
	dc_offset = 0;
	int num = 0;
	for (int t = 0; t < 2048; t++) {
		if ( (t < 184) || ( t > 1864) || (t == 1024) || (t == pilot) )  {
			if ( t == pilot ) {	
				num = num + 1;
				
				if (num == 120) {
					dc_offset = 1;
						}
				else {
					dc_offset = 0;
					
					}
				pilot = pilot + 7 + dc_offset;
						}
		continue;
		} else {
			out[c] = in[t] * exp(gr_complex(0, -t * beta - alpha)) * gr_complex(1 / avg_mag, 0);
			c++;
		}
	}

}

const gr_complex linear_comb::POLARITY[1680] = {
};
